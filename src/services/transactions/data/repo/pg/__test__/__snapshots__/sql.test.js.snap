// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`transactions.data api method get matches snapshot 1`] = `"with \\"ts\\" as (select \\"t\\".\\"uid\\" from \\"txs_12\\" as \\"t\\" where \\"t\\".\\"id\\" = '2jnH9e2KvEEAiWKHgwocD9arjK3AvBz6DbqwK8GUHdXA' limit 1) select \\"t\\".\\"uid\\" as \\"uid\\", \\"t\\".\\"tx_type\\" as \\"tx_type\\", \\"t\\".\\"tx_version\\" as \\"tx_version\\", \\"t\\".\\"height\\" as \\"height\\", \\"t\\".\\"id\\" as \\"id\\", \\"t\\".\\"signature\\" as \\"signature\\", \\"t\\".\\"time_stamp\\" as \\"time_stamp\\", \\"t\\".\\"proofs\\" as \\"proofs\\", \\"t\\".\\"status\\" as \\"status\\", \\"t\\".\\"sender\\" as \\"sender\\", \\"t\\".\\"sender_public_key\\" as \\"sender_public_key\\", \\"t\\".\\"fee\\" as \\"fee\\", \\"td\\".\\"data_key\\" as \\"data_key\\", \\"td\\".\\"data_type\\" as \\"data_type\\", \\"td\\".\\"data_value_integer\\" as \\"data_value_integer\\", \\"td\\".\\"data_value_boolean\\" as \\"data_value_boolean\\", \\"td\\".\\"data_value_string\\" as \\"data_value_string\\", \\"td\\".\\"data_value_binary\\" as \\"data_value_binary\\", \\"td\\".\\"position_in_tx\\" as \\"position_in_tx\\" from \\"ts\\" inner join \\"txs_12\\" as \\"t\\" on \\"ts\\".\\"uid\\" = \\"t\\".\\"uid\\" left join \\"txs_12_data\\" as \\"td\\" on \\"td\\".\\"tx_uid\\" = \\"t\\".\\"uid\\""`;

exports[`transactions.data api method mget matches snapshot 1`] = `"with \\"ts\\" as (select \\"t\\".\\"uid\\" from \\"txs_12\\" as \\"t\\" where \\"t\\".\\"id\\" in ('id1', 'id2') order by \\"t\\".\\"uid\\" desc limit 2) select \\"t\\".\\"uid\\" as \\"uid\\", \\"t\\".\\"tx_type\\" as \\"tx_type\\", \\"t\\".\\"tx_version\\" as \\"tx_version\\", \\"t\\".\\"height\\" as \\"height\\", \\"t\\".\\"id\\" as \\"id\\", \\"t\\".\\"signature\\" as \\"signature\\", \\"t\\".\\"time_stamp\\" as \\"time_stamp\\", \\"t\\".\\"proofs\\" as \\"proofs\\", \\"t\\".\\"status\\" as \\"status\\", \\"t\\".\\"sender\\" as \\"sender\\", \\"t\\".\\"sender_public_key\\" as \\"sender_public_key\\", \\"t\\".\\"fee\\" as \\"fee\\", \\"td\\".\\"data_key\\" as \\"data_key\\", \\"td\\".\\"data_type\\" as \\"data_type\\", \\"td\\".\\"data_value_integer\\" as \\"data_value_integer\\", \\"td\\".\\"data_value_boolean\\" as \\"data_value_boolean\\", \\"td\\".\\"data_value_string\\" as \\"data_value_string\\", \\"td\\".\\"data_value_binary\\" as \\"data_value_binary\\", \\"td\\".\\"position_in_tx\\" as \\"position_in_tx\\" from \\"ts\\" inner join \\"txs_12\\" as \\"t\\" on \\"ts\\".\\"uid\\" = \\"t\\".\\"uid\\" left join \\"txs_12_data\\" as \\"td\\" on \\"td\\".\\"tx_uid\\" = \\"t\\".\\"uid\\""`;

exports[`transactions.data api method search matches snapshots with after 1`] = `"with \\"ts\\" as (select \\"t\\".\\"uid\\" from \\"txs_12\\" as \\"t\\" where t.uid > 20000000) select \\"t\\".\\"uid\\" as \\"uid\\", \\"t\\".\\"tx_type\\" as \\"tx_type\\", \\"t\\".\\"tx_version\\" as \\"tx_version\\", \\"t\\".\\"height\\" as \\"height\\", \\"t\\".\\"id\\" as \\"id\\", \\"t\\".\\"signature\\" as \\"signature\\", \\"t\\".\\"time_stamp\\" as \\"time_stamp\\", \\"t\\".\\"proofs\\" as \\"proofs\\", \\"t\\".\\"status\\" as \\"status\\", \\"t\\".\\"sender\\" as \\"sender\\", \\"t\\".\\"sender_public_key\\" as \\"sender_public_key\\", \\"t\\".\\"fee\\" as \\"fee\\", \\"td\\".\\"data_key\\" as \\"data_key\\", \\"td\\".\\"data_type\\" as \\"data_type\\", \\"td\\".\\"data_value_integer\\" as \\"data_value_integer\\", \\"td\\".\\"data_value_boolean\\" as \\"data_value_boolean\\", \\"td\\".\\"data_value_string\\" as \\"data_value_string\\", \\"td\\".\\"data_value_binary\\" as \\"data_value_binary\\", \\"td\\".\\"position_in_tx\\" as \\"position_in_tx\\" from \\"ts\\" inner join \\"txs_12\\" as \\"t\\" on \\"ts\\".\\"uid\\" = \\"t\\".\\"uid\\" left join \\"txs_12_data\\" as \\"td\\" on \\"td\\".\\"tx_uid\\" = \\"t\\".\\"uid\\" order by \\"t\\".\\"uid\\" asc"`;

exports[`transactions.data api method search matches snapshots with key filter 1`] = `"with \\"ts\\" as (select \\"t\\".\\"uid\\" from \\"txs_12\\" as \\"t\\" where \\"t\\".\\"uid\\" in (select \\"tx_uid\\" from \\"txs_12_data\\" where \\"data_key\\" = 'testboolF')) select \\"t\\".\\"uid\\" as \\"uid\\", \\"t\\".\\"tx_type\\" as \\"tx_type\\", \\"t\\".\\"tx_version\\" as \\"tx_version\\", \\"t\\".\\"height\\" as \\"height\\", \\"t\\".\\"id\\" as \\"id\\", \\"t\\".\\"signature\\" as \\"signature\\", \\"t\\".\\"time_stamp\\" as \\"time_stamp\\", \\"t\\".\\"proofs\\" as \\"proofs\\", \\"t\\".\\"status\\" as \\"status\\", \\"t\\".\\"sender\\" as \\"sender\\", \\"t\\".\\"sender_public_key\\" as \\"sender_public_key\\", \\"t\\".\\"fee\\" as \\"fee\\", \\"td\\".\\"data_key\\" as \\"data_key\\", \\"td\\".\\"data_type\\" as \\"data_type\\", \\"td\\".\\"data_value_integer\\" as \\"data_value_integer\\", \\"td\\".\\"data_value_boolean\\" as \\"data_value_boolean\\", \\"td\\".\\"data_value_string\\" as \\"data_value_string\\", \\"td\\".\\"data_value_binary\\" as \\"data_value_binary\\", \\"td\\".\\"position_in_tx\\" as \\"position_in_tx\\" from \\"ts\\" inner join \\"txs_12\\" as \\"t\\" on \\"ts\\".\\"uid\\" = \\"t\\".\\"uid\\" left join \\"txs_12_data\\" as \\"td\\" on \\"td\\".\\"tx_uid\\" = \\"t\\".\\"uid\\" order by \\"t\\".\\"uid\\" asc"`;

exports[`transactions.data api method search matches snapshots with limit 1`] = `"with \\"ts\\" as (select \\"t\\".\\"uid\\" from \\"txs_12\\" as \\"t\\" limit 11) select \\"t\\".\\"uid\\" as \\"uid\\", \\"t\\".\\"tx_type\\" as \\"tx_type\\", \\"t\\".\\"tx_version\\" as \\"tx_version\\", \\"t\\".\\"height\\" as \\"height\\", \\"t\\".\\"id\\" as \\"id\\", \\"t\\".\\"signature\\" as \\"signature\\", \\"t\\".\\"time_stamp\\" as \\"time_stamp\\", \\"t\\".\\"proofs\\" as \\"proofs\\", \\"t\\".\\"status\\" as \\"status\\", \\"t\\".\\"sender\\" as \\"sender\\", \\"t\\".\\"sender_public_key\\" as \\"sender_public_key\\", \\"t\\".\\"fee\\" as \\"fee\\", \\"td\\".\\"data_key\\" as \\"data_key\\", \\"td\\".\\"data_type\\" as \\"data_type\\", \\"td\\".\\"data_value_integer\\" as \\"data_value_integer\\", \\"td\\".\\"data_value_boolean\\" as \\"data_value_boolean\\", \\"td\\".\\"data_value_string\\" as \\"data_value_string\\", \\"td\\".\\"data_value_binary\\" as \\"data_value_binary\\", \\"td\\".\\"position_in_tx\\" as \\"position_in_tx\\" from \\"ts\\" inner join \\"txs_12\\" as \\"t\\" on \\"ts\\".\\"uid\\" = \\"t\\".\\"uid\\" left join \\"txs_12_data\\" as \\"td\\" on \\"td\\".\\"tx_uid\\" = \\"t\\".\\"uid\\" order by \\"t\\".\\"uid\\" asc"`;

exports[`transactions.data api method search matches snapshots with no params 1`] = `"with \\"ts\\" as (select \\"t\\".\\"uid\\" from \\"txs_12\\" as \\"t\\") select \\"t\\".\\"uid\\" as \\"uid\\", \\"t\\".\\"tx_type\\" as \\"tx_type\\", \\"t\\".\\"tx_version\\" as \\"tx_version\\", \\"t\\".\\"height\\" as \\"height\\", \\"t\\".\\"id\\" as \\"id\\", \\"t\\".\\"signature\\" as \\"signature\\", \\"t\\".\\"time_stamp\\" as \\"time_stamp\\", \\"t\\".\\"proofs\\" as \\"proofs\\", \\"t\\".\\"status\\" as \\"status\\", \\"t\\".\\"sender\\" as \\"sender\\", \\"t\\".\\"sender_public_key\\" as \\"sender_public_key\\", \\"t\\".\\"fee\\" as \\"fee\\", \\"td\\".\\"data_key\\" as \\"data_key\\", \\"td\\".\\"data_type\\" as \\"data_type\\", \\"td\\".\\"data_value_integer\\" as \\"data_value_integer\\", \\"td\\".\\"data_value_boolean\\" as \\"data_value_boolean\\", \\"td\\".\\"data_value_string\\" as \\"data_value_string\\", \\"td\\".\\"data_value_binary\\" as \\"data_value_binary\\", \\"td\\".\\"position_in_tx\\" as \\"position_in_tx\\" from \\"ts\\" inner join \\"txs_12\\" as \\"t\\" on \\"ts\\".\\"uid\\" = \\"t\\".\\"uid\\" left join \\"txs_12_data\\" as \\"td\\" on \\"td\\".\\"tx_uid\\" = \\"t\\".\\"uid\\" order by \\"t\\".\\"uid\\" asc"`;

exports[`transactions.data api method search matches snapshots with sort desc 1`] = `"with \\"ts\\" as (select \\"t\\".\\"uid\\" from \\"txs_12\\" as \\"t\\" order by \\"t\\".\\"uid\\" desc) select \\"t\\".\\"uid\\" as \\"uid\\", \\"t\\".\\"tx_type\\" as \\"tx_type\\", \\"t\\".\\"tx_version\\" as \\"tx_version\\", \\"t\\".\\"height\\" as \\"height\\", \\"t\\".\\"id\\" as \\"id\\", \\"t\\".\\"signature\\" as \\"signature\\", \\"t\\".\\"time_stamp\\" as \\"time_stamp\\", \\"t\\".\\"proofs\\" as \\"proofs\\", \\"t\\".\\"status\\" as \\"status\\", \\"t\\".\\"sender\\" as \\"sender\\", \\"t\\".\\"sender_public_key\\" as \\"sender_public_key\\", \\"t\\".\\"fee\\" as \\"fee\\", \\"td\\".\\"data_key\\" as \\"data_key\\", \\"td\\".\\"data_type\\" as \\"data_type\\", \\"td\\".\\"data_value_integer\\" as \\"data_value_integer\\", \\"td\\".\\"data_value_boolean\\" as \\"data_value_boolean\\", \\"td\\".\\"data_value_string\\" as \\"data_value_string\\", \\"td\\".\\"data_value_binary\\" as \\"data_value_binary\\", \\"td\\".\\"position_in_tx\\" as \\"position_in_tx\\" from \\"ts\\" inner join \\"txs_12\\" as \\"t\\" on \\"ts\\".\\"uid\\" = \\"t\\".\\"uid\\" left join \\"txs_12_data\\" as \\"td\\" on \\"td\\".\\"tx_uid\\" = \\"t\\".\\"uid\\" order by \\"t\\".\\"uid\\" desc"`;

exports[`transactions.data api method search matches snapshots with timeEnd filter 1`] = `"with \\"ts\\" as (select \\"t\\".\\"uid\\" from \\"txs_12\\" as \\"t\\" where \\"t\\".\\"uid\\" <= (select \\"uid\\" from \\"txs_12\\" where \\"time_stamp\\" <= '2018-01-02T00:00:00.000Z' order by time_stamp <-> '2018-01-02T00:00:00.000Z'::timestamptz limit 1)) select \\"t\\".\\"uid\\" as \\"uid\\", \\"t\\".\\"tx_type\\" as \\"tx_type\\", \\"t\\".\\"tx_version\\" as \\"tx_version\\", \\"t\\".\\"height\\" as \\"height\\", \\"t\\".\\"id\\" as \\"id\\", \\"t\\".\\"signature\\" as \\"signature\\", \\"t\\".\\"time_stamp\\" as \\"time_stamp\\", \\"t\\".\\"proofs\\" as \\"proofs\\", \\"t\\".\\"status\\" as \\"status\\", \\"t\\".\\"sender\\" as \\"sender\\", \\"t\\".\\"sender_public_key\\" as \\"sender_public_key\\", \\"t\\".\\"fee\\" as \\"fee\\", \\"td\\".\\"data_key\\" as \\"data_key\\", \\"td\\".\\"data_type\\" as \\"data_type\\", \\"td\\".\\"data_value_integer\\" as \\"data_value_integer\\", \\"td\\".\\"data_value_boolean\\" as \\"data_value_boolean\\", \\"td\\".\\"data_value_string\\" as \\"data_value_string\\", \\"td\\".\\"data_value_binary\\" as \\"data_value_binary\\", \\"td\\".\\"position_in_tx\\" as \\"position_in_tx\\" from \\"ts\\" inner join \\"txs_12\\" as \\"t\\" on \\"ts\\".\\"uid\\" = \\"t\\".\\"uid\\" left join \\"txs_12_data\\" as \\"td\\" on \\"td\\".\\"tx_uid\\" = \\"t\\".\\"uid\\" order by \\"t\\".\\"uid\\" asc"`;

exports[`transactions.data api method search matches snapshots with timeStart filter 1`] = `"with \\"ts\\" as (select \\"t\\".\\"uid\\" from \\"txs_12\\" as \\"t\\" where \\"t\\".\\"uid\\" >= (select \\"uid\\" from \\"txs_12\\" where \\"time_stamp\\" >= '2018-01-01T00:00:00.000Z' order by time_stamp <-> '2018-01-01T00:00:00.000Z'::timestamptz limit 1)) select \\"t\\".\\"uid\\" as \\"uid\\", \\"t\\".\\"tx_type\\" as \\"tx_type\\", \\"t\\".\\"tx_version\\" as \\"tx_version\\", \\"t\\".\\"height\\" as \\"height\\", \\"t\\".\\"id\\" as \\"id\\", \\"t\\".\\"signature\\" as \\"signature\\", \\"t\\".\\"time_stamp\\" as \\"time_stamp\\", \\"t\\".\\"proofs\\" as \\"proofs\\", \\"t\\".\\"status\\" as \\"status\\", \\"t\\".\\"sender\\" as \\"sender\\", \\"t\\".\\"sender_public_key\\" as \\"sender_public_key\\", \\"t\\".\\"fee\\" as \\"fee\\", \\"td\\".\\"data_key\\" as \\"data_key\\", \\"td\\".\\"data_type\\" as \\"data_type\\", \\"td\\".\\"data_value_integer\\" as \\"data_value_integer\\", \\"td\\".\\"data_value_boolean\\" as \\"data_value_boolean\\", \\"td\\".\\"data_value_string\\" as \\"data_value_string\\", \\"td\\".\\"data_value_binary\\" as \\"data_value_binary\\", \\"td\\".\\"position_in_tx\\" as \\"position_in_tx\\" from \\"ts\\" inner join \\"txs_12\\" as \\"t\\" on \\"ts\\".\\"uid\\" = \\"t\\".\\"uid\\" left join \\"txs_12_data\\" as \\"td\\" on \\"td\\".\\"tx_uid\\" = \\"t\\".\\"uid\\" order by \\"t\\".\\"uid\\" asc"`;

exports[`transactions.data api method search matches snapshots with type and value 1`] = `"with \\"ts\\" as (select \\"t\\".\\"uid\\" from \\"txs_12\\" as \\"t\\" where \\"t\\".\\"uid\\" in (select \\"tx_uid\\" from \\"txs_12_data\\" where \\"data_type\\" = 'integer' and \\"data_value_integer\\" = 11)) select \\"t\\".\\"uid\\" as \\"uid\\", \\"t\\".\\"tx_type\\" as \\"tx_type\\", \\"t\\".\\"tx_version\\" as \\"tx_version\\", \\"t\\".\\"height\\" as \\"height\\", \\"t\\".\\"id\\" as \\"id\\", \\"t\\".\\"signature\\" as \\"signature\\", \\"t\\".\\"time_stamp\\" as \\"time_stamp\\", \\"t\\".\\"proofs\\" as \\"proofs\\", \\"t\\".\\"status\\" as \\"status\\", \\"t\\".\\"sender\\" as \\"sender\\", \\"t\\".\\"sender_public_key\\" as \\"sender_public_key\\", \\"t\\".\\"fee\\" as \\"fee\\", \\"td\\".\\"data_key\\" as \\"data_key\\", \\"td\\".\\"data_type\\" as \\"data_type\\", \\"td\\".\\"data_value_integer\\" as \\"data_value_integer\\", \\"td\\".\\"data_value_boolean\\" as \\"data_value_boolean\\", \\"td\\".\\"data_value_string\\" as \\"data_value_string\\", \\"td\\".\\"data_value_binary\\" as \\"data_value_binary\\", \\"td\\".\\"position_in_tx\\" as \\"position_in_tx\\" from \\"ts\\" inner join \\"txs_12\\" as \\"t\\" on \\"ts\\".\\"uid\\" = \\"t\\".\\"uid\\" left join \\"txs_12_data\\" as \\"td\\" on \\"td\\".\\"tx_uid\\" = \\"t\\".\\"uid\\" order by \\"t\\".\\"uid\\" asc"`;
